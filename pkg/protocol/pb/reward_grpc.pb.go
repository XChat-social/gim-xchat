// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: reward.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RewardService_DailySignIn_FullMethodName         = "/pb.RewardService/DailySignIn"
	RewardService_ClaimSevenDayReward_FullMethodName = "/pb.RewardService/ClaimSevenDayReward"
)

// RewardServiceClient is the client API for RewardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RewardServiceClient interface {
	// 每日签到接口
	DailySignIn(ctx context.Context, in *DailySignInReq, opts ...grpc.CallOption) (*DailySignInResp, error)
	// 连续7天奖励接口
	ClaimSevenDayReward(ctx context.Context, in *ClaimSevenDayRewardReq, opts ...grpc.CallOption) (*ClaimSevenDayRewardResp, error)
}

type rewardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRewardServiceClient(cc grpc.ClientConnInterface) RewardServiceClient {
	return &rewardServiceClient{cc}
}

func (c *rewardServiceClient) DailySignIn(ctx context.Context, in *DailySignInReq, opts ...grpc.CallOption) (*DailySignInResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DailySignInResp)
	err := c.cc.Invoke(ctx, RewardService_DailySignIn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rewardServiceClient) ClaimSevenDayReward(ctx context.Context, in *ClaimSevenDayRewardReq, opts ...grpc.CallOption) (*ClaimSevenDayRewardResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClaimSevenDayRewardResp)
	err := c.cc.Invoke(ctx, RewardService_ClaimSevenDayReward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RewardServiceServer is the server API for RewardService service.
// All implementations must embed UnimplementedRewardServiceServer
// for forward compatibility.
type RewardServiceServer interface {
	// 每日签到接口
	DailySignIn(context.Context, *DailySignInReq) (*DailySignInResp, error)
	// 连续7天奖励接口
	ClaimSevenDayReward(context.Context, *ClaimSevenDayRewardReq) (*ClaimSevenDayRewardResp, error)
	mustEmbedUnimplementedRewardServiceServer()
}

// UnimplementedRewardServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRewardServiceServer struct{}

func (UnimplementedRewardServiceServer) DailySignIn(context.Context, *DailySignInReq) (*DailySignInResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DailySignIn not implemented")
}
func (UnimplementedRewardServiceServer) ClaimSevenDayReward(context.Context, *ClaimSevenDayRewardReq) (*ClaimSevenDayRewardResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimSevenDayReward not implemented")
}
func (UnimplementedRewardServiceServer) mustEmbedUnimplementedRewardServiceServer() {}
func (UnimplementedRewardServiceServer) testEmbeddedByValue()                       {}

// UnsafeRewardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RewardServiceServer will
// result in compilation errors.
type UnsafeRewardServiceServer interface {
	mustEmbedUnimplementedRewardServiceServer()
}

func RegisterRewardServiceServer(s grpc.ServiceRegistrar, srv RewardServiceServer) {
	// If the following call pancis, it indicates UnimplementedRewardServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RewardService_ServiceDesc, srv)
}

func _RewardService_DailySignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DailySignInReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardServiceServer).DailySignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RewardService_DailySignIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardServiceServer).DailySignIn(ctx, req.(*DailySignInReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RewardService_ClaimSevenDayReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimSevenDayRewardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardServiceServer).ClaimSevenDayReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RewardService_ClaimSevenDayReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardServiceServer).ClaimSevenDayReward(ctx, req.(*ClaimSevenDayRewardReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RewardService_ServiceDesc is the grpc.ServiceDesc for RewardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RewardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.RewardService",
	HandlerType: (*RewardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DailySignIn",
			Handler:    _RewardService_DailySignIn_Handler,
		},
		{
			MethodName: "ClaimSevenDayReward",
			Handler:    _RewardService_ClaimSevenDayReward_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reward.proto",
}
